update(this_moment,hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment<- update(this_moment, now())
this_moment<- update(this_moment, now
)
now()
this_moment<- update(this_moment, hours = 11, minutes = 58, seconds = 0)
this_moment
?now
nyc<-now("America/New_York")
nyc
depart<-nyc+days(2)
depart
depart<-update(depart, hours=17, minutes=34)
depart
arrive<-depart+hours(15)+minutes(50)
?with_tz
arrive<-with_tz(arrive,tzone = "Asia/Hong_Kong")
arrive
last_time<-mdy("June 17 2008", tz = "Singapore")
last_time<-mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long<-new_interval(last_time,arrive)
as.period(how_long)
stopwatch()
library(swirl)
swirl()
head(airquality)
xyplot(Ozone~Wind, data = airquality)
xyplot(Ozone~Wind, data = airquality, col = "red", pch = 8, main = "Big Apple Data")
xyplot(Ozone~Wind | Month, data = airquality, layout = c(5,1))
xyplot(Ozone~Wind | as.factor(Month), data = airquality, layout = c(5,1))
xyplot(Ozone~Wind | Month, data = airquality, layout = c(5,1))
p<-xyplot(Ozone~Wind, data = airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f,layout = c(5,1))
xyplot(y~x|f,layout = c(2,1))
head(v1)
v1
v2
myedit("plot1.R")
source(pathtofile("plot1.R"), local = TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local = TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"), local = TRUE)
xyplot(price~carat|color*cut, data = diamonds, strip = FALSE, pch=20, xlab = "myxlab", ylab = "myylab", main="mymain")
xyplot(price~carat|color*cut, data = diamonds, strip = FALSE, pch=20, xlab = myxlab, ylab = myylab, main=mymain)
xyplot(price~carat|color*cut, data = diamonds, pch=20, xlab = myxlab, ylab = myylab, main=mymain)
sample(colors(), 10)
pal<-colorRamp(c("red","blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1<-colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xcc
p2<-colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
View(showMe)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?rgb
p3<-colorRampPalette(c("blue","green"), alpha=0.5)
p3(5)
plot(x,y, pch=19, col=rgb(0,.5,.5))
plot(x,y, pch=19, col=rgb(0,.5,.5,.3))
cols<-brewer.pal(3, "BuGn")
showMe(cols)
pal<-colorRampPalette(cols)
showMe(pal(3))
showMe(pal(20))
image(volcano, col = pal(20))
image(volcano, col = p1(20))
q
library("lattice")
xyplot()
library("nlme")
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library("ggplot2")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
library(swirl)
swirl()
dist(dataFrame)
hclust(distxy)
hc<-hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col="blue")
abline(h=0.4, col="red")
5
5
12
abline(h=0.05, col="green")
dist(dFsm)
hc
heatmap(dataMatrix, col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
library(swirl)
swirl()
str(mpg)
qplot(displ, hwy, mpg)
qplot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg, col = drv)
qplot(displ, hwy, data=mpg, color = drv)
qplot(displ, hwy, data=mpg, color = drv, geom = c("point","smooth"))
qplot(y = hwy, data = mpg, color = drv)
myhigh
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(why, data = mpg, aesthetic = drv)
qplot(why, data = mpg, fill = drv)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = .~drv)
qplot(hwy, data = mpg, facets = drv~., binwidth = 2)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv, method = "loess")
g <- ggplot(mpg, displ, hwy)
g <- ggplot(mpg, plot(displ, hwy))
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method = "lm")
g+geom_point()+geom_smooth(method = "lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method = "lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink", size = 4, alpha = 1/2)
g+geom_point(size = 4, alpha = 1/2, aes(color=drv))
g+geom_point(aes(color=drv))+labs(title("Swirl Rules!"))+labs(x="Displacement", y = "Hwy Mileage")
g+geom_point(aes(color=drv))+labs(title="Swirl Rules!")+labs(x="Displacement", y = "Hwy Mileage")
g+geom_point(size = 4, alpha = 1/2, aes(color=drv)), geom_smooth(size=4, linetype=3, method="lm")
g+geom_point(size = 4, alpha = 1/2, aes(color=drv)), geom_smooth(size=4, linetype=3, method="lm", se=FALSE)
g+geom_point(size = 4, alpha = 1/2, aes(color=drv))+geom_smooth(size=4, linetype=3, method="lm", se=FALSE)
g+geom_point(aes(color=drv),size = 2, alpha = 1/2)+geom_smooth(size=4, linetype=3, method="lm", se=FALSE)
g+geom_point(aes(color=drv))+theme_bw(base_family = "Times")
plot(myx, myy, type = "l", ylim = c(-3,3))
g<-ggplot(testdat, aes(myx, myy))
g+geom_line(0)
g+geom_line()
g+geom_line(ylim(-3,3))
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(ylim = c(-3,3))
g<-ggplot(mpg, aes(x=displ, y = hw, color=factor(year)))
g<-ggplot(mpg, aes(x=displ, y = hwy, color=factor(year)))
g+geom_point()
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)+geom_smooth(method="lm", se=FALSE, size=2, color="black")
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)+geom_smooth(method="lm", se=FALSE, size=2, color="black")+labs(x="Displacement", y="Highway Mileage", title="Swirl Rules!")
library(swirl)
swirl()
0
library(swirl)
swirl()
str(diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, binwidth=18497/30)
brk
counts
qplot(price, data = diamonds, binwidth=18497/30, fill=cut)
qplot(price, data=diamonds, geom = "density")
qplot(price, data=diamonds, geom = "density", color = cut)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape=cut)
qplot(carat, price, data = diamonds, color=cut)
qplot(carat, price, data = diamonds, color=cut, geom = c("point","smooth"), method = "lm")
qplot(carat, price, data = diamonds, color=cut, geom = c("point","smooth"), method = "lm", facets = .~cut)
g<-ggplot(diamonds, aes(depth, price))
g
summary(g)
g+geom_point(alphha=1/3)
g+geom_point(alpha=1/3)
cutpoints<-quantile(diamonds$carat, seq(0,1,lenght=4),na.rm = TRUE)
cutpoints<-quantile(diamonds$carat, seq(0,1,length=4),na.rm = TRUE)
cutpoints
diamonds$car2<-cut(diamonds$carat, cutpoints)
g<-ggplot(diamonds, aes(depth, price))
g+geom_point(alpha=1/3)+facet_grid(cut~car2)
diamonds[myd,]
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm",size=3, color="pink")
ggplot(diamonds, aes(carat, price))+geom_boxplot()+facet_grid(.~cut)
load("~/Dropbox/CROB/ABSI - epidemiology/ATENA/antro_R.RData")
load("~/Dropbox/CROB/ABSI - epidemiology/ATENA/antro_R.RData")
height <- antro$altezza
weight<- antro$peso
waist <- antro$circaddo
hip <- antro$circbaci
bmi<- antro$bmi
whr<- antro$whr
WHtR<- antro$WHtR
WHHR<- antro$WHHR
absi <- antro$ABSI
bri <- antro$BRI
CORR <- cbind(height, weight,waist,hip,bmi,whr,WHtR,WHHR, absi, bri)
CORR(names) <- c("height", "weight","waist","hip","bmi","whr","WHtR","WHHR", "ABSI", "BRI")
names(CORR) <- c("height", "weight","waist","hip","bmi","whr","WHtR","WHHR", "ABSI", "BRI")
View(CORR)
install.packages("corrplot")
library(corrplot)
M <- cor(CORR)
View(M)
View(CORR)
str(CORR)
CORR <- as.data.frame(CORR)
str(CORR)
M <- cor(CORR)
View(M)
M <- cor(CORR, na.rm=TRUE)
M <- cor(CORR, na.rm=FALSE)
str(CORR)
CORR$height<-as.numric(CORR$height)
CORR$height<-as.numeric(CORR$height)
str(CORR)
M<-cor(absi,bmi)
rm(M)
is.na(absi)
sum(is.na(absi))
mean(absi)
mean(absi, na.rm = TRUE)
M<-cor(absi,bmi, na.rm=TRUE)
M<-cor(x = CORR, na.rm=TRUE)
M<-cor(x = CORR, na.rm=TRUE)
M<-cor(CORR, na.rm=TRUE)
M<-cor(mtcars)
str(mtcars)
is.na(mtcars)
sum(is.na(mtcars))
M<-cor(CORR)
M<-cor(CORR, na.rm=TRUE)
M<-cor(CORR, na.rm=FALSE)
save.image("~/Dropbox/CROB/ABSI - epidemiology/ATENA/antro_R.RData")
library(ggplot2)
g<-ggplot(data=antro, aes(eta, peso))
g+geom_point()
norm$eta<-antro$eta
eta<-antro$eta
peso<-antro$peso
norm<-cbind(eta, peso)
View(norm)
g<-ggplot(data=norm, aes(eta, peso))
norm<-as.data.frame(norm)
g<-ggplot(data=norm, aes(eta, peso))
g+geom_point()
norm<-normalise(norm, "weight", by"eta")
norm<-normalise(norm, "weight", by="eta")
source("http://db.tt/22hmSliJ")
mean(antro$eta)
sd(antro$eta)
range(antro$eta)
median(antro$eta)
setwd("Desktop/Coursera/Git/RepData_PeerAssessment1/")
unzip("activity.zip")
# set your working directory to new repo and load the data
unzip("activity.zip")
activity <- read.csv("activity.csv")
# set your working directory to new repo and load the data
unzip("activity.zip")
activity <- read.csv("activity.csv")
head(activity)
str(activity)
# no preprocessing at the moment
# set your working directory to new repo and load the data
unzip("activity.zip")
activity <- read.csv("activity.csv")
head(activity)
str(activity)
# preprocessing of Date
activity$date <- as.Date(activity$date)
# set your working directory to new repo and load the data
unzip("activity.zip")
activity <- read.csv("activity.csv")
# preprocessing of Date
activity$date <- as.Date(activity$date)
head(activity)
str(activity)
#remove NAs
activityNA<-activity[which(!is.na(activity$steps)),]
#remove NAs
activityNA<-activity[which(!is.na(activity$steps)),]
# group by Day using dplyr
library(dplyr)
by_dateNA <- group_by(activityNA, date)
#remove NAs
activityNA<-activity[which(!is.na(activity$steps)),]
# group by Day using dplyr and summarise
library(dplyr)
by_dateNA <- group_by(activityNA, date)
total <- summarise(by_dateNA,total = sum(steps))
# histogram for total steps
#remove NAs
activityNA<-activity[which(!is.na(activity$steps)),]
# group by Day using dplyr and summarise
library(dplyr)
by_dateNA <- group_by(activityNA, date)
total <- summarise(by_dateNA,total = sum(steps))
# histogram for total steps using ggplot
library(ggplot2)
qplot(total$total, xlab='Total steps per day')
#remove NAs
activityNA<-activity[which(!is.na(activity$steps)),]
# group by Day using dplyr and summarise
library(dplyr)
by_dateNA <- group_by(activityNA, date)
total <- summarise(by_dateNA,total = sum(steps))
# histogram for total steps using ggplot
library(ggplot2)
qplot(total$total, xlab='Total steps per day')
# calculate and report mean
meanNA<-mean(total$total)
meanNA
# calculate and report median
medianNA<-median(total$total)
medianNA
#remove NAs
activityNA<-activity[which(!is.na(activity$steps)),]
# group by Day using dplyr and summarise
library(dplyr)
by_dateNA <- group_by(activityNA, date)
total <- summarise(by_dateNA,total = sum(steps))
# histogram for total steps using ggplot (and save as png)
library(ggplot2)
qplot(total$total, xlab='Total steps per day')
dev.copy(png, file="histogramNA.png", height=480, width=480)
dev.off()
# calculate and report mean
meanNA<-mean(total$total)
meanNA
# calculate and report median
medianNA<-median(total$total)
medianNA
# group by Interval using dplyr and summarise to plot
by_interval<- group_by(activityNA, interval)
mean_interval <- summarise(by_step,mean = mean(steps))
# time series plot of mean interval (and save it)
plot(mean_interval$interval,mean_interval1$mean,type = "l")
dev.copy(png, file="time_series.png", height=480, width=480)
dev.off()
# group by Interval using dplyr and summarise to plot
by_interval<- group_by(activityNA, interval)
mean_interval <- summarise(by_interval,mean = mean(steps))
# time series plot of mean interval (and save it)
plot(mean_interval$interval,mean_interval1$mean,type = "l")
dev.copy(png, file="time_series.png", height=480, width=480)
dev.off()
# group by Interval using dplyr and summarise to plot
by_interval<- group_by(activityNA, interval)
mean_interval <- summarise(by_interval,mean = mean(steps))
# time series plot of mean interval (and save it)
plot(mean_interval$interval,mean_interval$mean,type = "l")
dev.copy(png, file="time_series.png", height=480, width=480)
dev.off()
# group by Interval using dplyr and summarise to plot
by_interval<- group_by(activityNA, interval)
mean_interval <- summarise(by_interval,mean = mean(steps))
# time series plot of mean interval (and save it)
plot(mean_interval$interval,mean_interval$mean,type = "l", xlab = "5-Min-Interval", main = "Daily Activity Pattern", ylab = "Mean of steps")
dev.copy(png, file="time_series.png", height=480, width=480)
dev.off()
max_step<-mean_interval$interval[which.max(mean_interval$mean)]
max_step
#look at the result like x:xx, the interval is each 5 minutes
sum(is.na(activity))
sum(is.na(activity$steps))
sum(is.na(activity$date))
sum(is.na(activity$interval))
sum(is.na(activity))
sum(is.na(activity$steps))
sum(is.na(activity$date))
sum(is.na(activity$interval))
# there are missing values in steps variable
# use the mean for each interval across all days
# we can use 'mean_interval' recently created
mean_NA<-mean_interval$mean
interval_NA<-mean_interval$interval
mean_NA<-as.array(mean_NA)
row.names(mean_NA)<-interval_NA
# use the mean for each interval across all days
# we can use 'mean_interval' recently created
mean_NA<-mean_interval$mean
interval_NA<-mean_interval$interval
mean_NA<-as.array(mean_NA)
row.names(mean_NA)<-interval_NA
head(mean_NA)
class(activity)
# use the mean for each interval across all days
# we can use 'mean_interval' recently created
mean_NA<-mean_interval$mean
interval_NA<-mean_interval$interval
mean_NA<-as.array(mean_NA)
row.names(mean_NA)<-interval_NA
head(mean_NA)
# create a new data.frame
activity_imputed<-activity
# use mean_NA to assign interval mean to each missing value
activity_imputed[which(is.na(activity_imputed$steps)),1]<-
mean_NA[as.character(activity_imputed[which(is.na(activity_imputed$steps)),3])]
# group by Day using dplyr and summarise
by_date <- group_by(activity_imputed, date)
total_noNA <- summarise(by_date,total = sum(steps))
# histogram for total steps using ggplot (and save as png)
qplot(total$total_noNA, xlab='Total steps per day (imputed data)')
dev.copy(png, file="histogram_noNA.png", height=480, width=480)
dev.off()
qplot(total$total, xlab='Total steps per day (imputed data)')
qplot(total$total_noNA, xlab='Total steps per day (imputed data)')
hist(total$total_noNA, xlab='Total steps per day (imputed data)')
hist(as.numeric(total$total_noNA), xlab='Total steps per day (imputed data)')
hist(as.numeric(total$total_noNA))
qplot(total$total_noNA, xlab='Total steps per day - imputed data', binwidth=500)
# calculate and report mean
mean_noNA<-mean(total$total_noNA)
mean_noNA
# calculate and report median
median_noNA<-median(total$total_noNA)
median_noNA
sum(is.na(activity_imputed))
by_date <- group_by(activity_imputed, date)
total_noNA <- summarise(by_date,total = sum(steps))
# group by Day using dplyr and summarise
by_date <- group_by(activity_imputed, date)
total_noNA <- summarise(by_date,total = sum(steps))
# histogram for total steps using ggplot (and save as png)
qplot(total_noNA$total, xlab='Total steps per day - imputed data')
dev.copy(png, file="histogram_noNA.png", height=480, width=480)
dev.off()
# calculate and report mean
mean_noNA<-mean(total_noNA$total)
mean_noNA
# calculate and report median
median_noNA<-median(total_noNA$total)
median_noNA
# calculate and report mean
mean_noNA<-mean(total_noNA$total)
mean_noNA
mean_NA
# calculate and report median
median_noNA<-median(total_noNA$total)
median_noNA
medianNA
# calculate and report mean
mean_noNA<-mean(total_noNA$total)
mean_noNA
meanNA
# calculate and report median
median_noNA<-median(total_noNA$total)
median_noNA
medianNA
# create weekdays variable
activityNA$days<-weekdays(activityNA$date)
activityNA$week<-as.factor(c("weekends", "weekdays"))
# change week variable if days are during the week or the weekend
activityNA[activityNA$days == "Sunday" | activityNA$days == "Saturday" ,5]<- factor("weekends")
activityNA[!(activityNA$days == "Sunday" | activityNA$days == "Saturday") ,5]<- factor("weekdays")
View(activityNA)
head(activityNA)
tail(activityNA)
table(activityNA$days, activityNA$week)
# create weekdays variable
activityNA$days<-weekdays(activityNA$date)
activityNA$week<-as.factor(c("weekends", "weekdays"))
# change week variable if days are during the week or the weekend
activityNA[activityNA$days == "Sunday" | activityNA$days == "Saturday" ,5]<- factor("weekends")
activityNA[!(activityNA$days == "Sunday" | activityNA$days == "Saturday") ,5]<- factor("weekdays")
tabWeek<- table(activityNA$days, activityNA$week)
tabWeek
# group by Interval using dplyr and summarise to plot
by_intervalW<- group_by(activityNA, interval, week)
mean_intervalW<- summarise(by_intervalW,mean = mean(steps, na.rm = TRUE))
# time series plot of mean interval (and save it)
g<-ggplot(mean_intervalW, aes(interval, mean))
g+geom_line()+facet_grid(.~week)
dev.copy(png, file="time_series_week.png", height=480, width=480)
dev.off()
knit2html("PA1_template.Rmd")
install.packages("knit2html")
library(knit2html)
install.packages("installr")
